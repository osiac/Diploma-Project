import Adafruit_DHT
import RPi.GPIO as GPIO
import time
from time import sleep 
from datetime import datetime
import spidev 
import os 
import math 
import subprocess 
import json
import paho.mqtt.publish as publicare
import Actuatoare
#import MQTTsubscribe

MQTT_HOST="mqtt.beia-telemetrie.ro"
MQTT_TOPIC="training/device/Filip_LICENTA"


DHT_SENSOR = Adafruit_DHT.DHT22
DHT_PIN = 2
umiditate=3
incendiu= 26
prezenta_ploaie=4
lumina=10
logfile = "date.txt"
def local_save(data):
    file = open(logfile, "a+")
    file.write(data + "\r\n");
    file.close()

try :
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(umiditate, GPIO.IN)
    GPIO.setup(prezenta_ploaie, GPIO.IN)
    GPIO.setup(incendiu, GPIO.IN)
    GPIO.setup(lumina, GPIO.IN)
    GPIO.setwarnings(False)
    while True:
    #senzor temperatura si umiditate
        humidity, temperature = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN)
        if(GPIO.input(umiditate)==True):
            umiditate_sol=1
        else:
            umiditate_sol=0
    #senzor de ploaie:
        if(GPIO.input(prezenta_ploaie)==True):
            ploaie=0
        else:
            ploaie=1
        #print(ploaie)
    #senzor lumina
        if(GPIO.input(lumina)==True):
            light=0
        else:
            light=1
    #senzor foc
        foc = GPIO.input(incendiu)
        if (foc==1):
            fire=0
        else:
            fire=1
        ultimul_element = 0
    #ventilator
        if (temperature>26.00):
            Actuatoare.ventilator_on()
        else:
            Actuatoare.ventilator_off()
    #pompa_apa
        if (umiditate_sol==1):
            Actuatoare.pompa_apa_on()
            time.sleep(1)
            Actuatoare.pompa_apa_off()
        #print (foc)
        #print(MQTTsubscribe.on_message())
        payload_dict={"Temperatura":round(temperature,2), 
                      "Umiditate":round(humidity,2),  
                      "Umiditate_sol":umiditate_sol,   
                      "Incendiu_detectat" : fire,  
                      "Lumina" :light,  
                      "Ploaie" : ploaie,
                      "Ultimul_element":ultimul_element}
        message = "Temperatura" + str(round(temperature,2)) + " " + " Umiditate  " + str(round(humidity,2)) + " " + "Umiditate_sol" + str(umiditate_sol) + " " +"Incendiu_detectat" +str(fire) + " " +"Lumina" +str(light) + " " +"Ploaie" +str(ploaie)
        print(payload_dict)
        
        try: 
            publicare.single(MQTT_TOPIC,qos = 1,hostname = MQTT_HOST,payload = json.dumps(payload_dict)) 
            local_save(message) 
        except: 
            GPIO.cleanup()
            local_save(message) 
        time.sleep(20)
except KeyboardInterrupt:               
    GPIO.cleanup() 
    
        

